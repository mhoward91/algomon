Logarithmic equation:
y = log(x) -> to what power must we raise a certain base to get a number? How many times can we divide a number by 2 until we reach 1?
2^y = x

Convert FROM binary:
1   0   0   1

from the right hand side:
1 x 2^0 = 1
0 x 2^1 = 0
0 x 2^2 = 0
1 x 2^3 = 8

add them up:
1 + 0 + 0 + 8 = 9


Convert TO binary:
9

Divide by 2, capture integer answer & remainder - repeat until arriving at 0
9//2 = 4, remainder 1

4//2 = 2, remainder 0

2//2 = 1, remainder 0

1//2 = 0, not clean, so remainder 1 

From the bottom, binary is:

1   0   0   1

Permutations:
Number of ways to arrange n objects, is n!

Subsets - a subset of A is another set containing only elements present in A
If a set has n elements, there will be 2 ^ n subsets, where the empty and full array is included in the subset count

Arithmatic sequence - Number sequence with equal difference between elements, with n elements (polynomial O(n^2) time complexity)
Sum is (first + last) * n / 2

Geometric sequence - number sequence with equal ratio between consecutive terms, e.g. 1, 3, 9, 27, 81 wih a ratio of 3
Sum is first * (1 - ratio ^ n) / (1 - ratio)
Useful counting nodes in a perfect binary tree

Modular arithmetic - integers that wrap around when reaching a certain value, like clocks
Calculate MOD: x % y
if x < y, return y
else subtract y from x until x < y
Note use mod to calculate prime number 
Also a + b MOD y = (a MOD y) + (b MOD y) MOD y
